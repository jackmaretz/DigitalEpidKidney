{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 1.1a\n",
    "- Rescaling values required\n",
    "- I want to get a correlation value per state (crude)\n",
    "- I want to get a correlation value per state (age adjusted)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 1.1b\n",
    "- I want to get a correlation per year of all the states.\n",
    "so: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "for states in states:\n",
    "    cor.append(cor(statesYear1,stateYear1))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats.stats import pearsonr\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "states = {\n",
    "        'AK': 'Alaska',\n",
    "        'AL': 'Alabama',\n",
    "        'AR': 'Arkansas',\n",
    "        'AS': 'American Samoa',\n",
    "        'AZ': 'Arizona',\n",
    "        'CA': 'California',\n",
    "        'CO': 'Colorado',\n",
    "        'CT': 'Connecticut',\n",
    "        'DC': 'District of Columbia',\n",
    "        'DE': 'Delaware',\n",
    "        'FL': 'Florida',\n",
    "        'GA': 'Georgia',\n",
    "        'GU': 'Guam',\n",
    "        'HI': 'Hawaii',\n",
    "        'IA': 'Iowa',\n",
    "        'ID': 'Idaho',\n",
    "        'IL': 'Illinois',\n",
    "        'IN': 'Indiana',\n",
    "        'KS': 'Kansas',\n",
    "        'KY': 'Kentucky',\n",
    "        'LA': 'Louisiana',\n",
    "        'MA': 'Massachusetts',\n",
    "        'MD': 'Maryland',\n",
    "        'ME': 'Maine',\n",
    "        'MI': 'Michigan',\n",
    "        'MN': 'Minnesota',\n",
    "        'MO': 'Missouri',\n",
    "        'MP': 'Northern Mariana Islands',\n",
    "        'MS': 'Mississippi',\n",
    "        'MT': 'Montana',\n",
    "        'NA': 'National',\n",
    "        'NC': 'North Carolina',\n",
    "        'ND': 'North Dakota',\n",
    "        'NE': 'Nebraska',\n",
    "        'NH': 'New Hampshire',\n",
    "        'NJ': 'New Jersey',\n",
    "        'NM': 'New Mexico',\n",
    "        'NV': 'Nevada',\n",
    "        'NY': 'New York',\n",
    "        'OH': 'Ohio',\n",
    "        'OK': 'Oklahoma',\n",
    "        'OR': 'Oregon',\n",
    "        'PA': 'Pennsylvania',\n",
    "        'PR': 'Puerto Rico',\n",
    "        'RI': 'Rhode Island',\n",
    "        'SC': 'South Carolina',\n",
    "        'SD': 'South Dakota',\n",
    "        'TN': 'Tennessee',\n",
    "        'TX': 'Texas',\n",
    "        'UT': 'Utah',\n",
    "        'VA': 'Virginia',\n",
    "        'VI': 'Virgin Islands',\n",
    "        'VT': 'Vermont',\n",
    "        'WA': 'Washington',\n",
    "        'WI': 'Wisconsin',\n",
    "        'WV': 'West Virginia',\n",
    "        'WY': 'Wyoming'\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pytrends.request import TrendReq\n",
    "\n",
    "pytrends = TrendReq(hl='en-US', tz=360)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getCor(query,year,gt_Year_Type,type_):\n",
    "    \n",
    "    if year == 2011:\n",
    "        year = '2011-01-01 2011-12-31'\n",
    "    if year == 2012:\n",
    "        year = '2012-01-01 2012-12-31'\n",
    "    if year == 2013:\n",
    "        year = '2013-01-01 2013-12-31'\n",
    "    if year == 2014:\n",
    "        year = '2014-01-01 2014-12-31'\n",
    "    if year == 2015:\n",
    "        year = '2015-01-01 2015-12-31'\n",
    "    if year == 2016:\n",
    "        year = '2016-01-01 2016-12-31'\n",
    "    \n",
    "    kw_list = query\n",
    "    #kw_list=['kidney']\n",
    "    pytrends.build_payload(kw_list, cat=0, timeframe=year, geo='US', gprop='')\n",
    "    googleTrend = pytrends.interest_by_region()\n",
    "    #if type_ == \"AAP\":\n",
    "    #    df_gt = pd.read_csv(gt_Year_Type, sep=\";\")\n",
    "    #if type_ == \"CP\":\n",
    "    #    df_gt = pd.read_csv(gt_Year_Type, sep=\";\")\n",
    "\n",
    "    df_gt = pd.read_csv(gt_Year_Type, sep=\";\")\n",
    "    df_gt = df_gt[np.logical_not(pd.to_numeric(df_gt.LocationAbbr, errors='coerce').notnull())]\n",
    "    df_gt = df_gt.dropna(subset=['LocationAbbr']) \n",
    "#   googleTrend = outputQueryAPI (query,year)  # GABRIEL API\n",
    "    #googleTrend = pd.read_csv(query,sep=\",\")\n",
    "\n",
    "\n",
    "    g = (googleTrend[1:])\n",
    "    g = g.convert_objects(convert_numeric=True)\n",
    "    g = g.sort_index()\n",
    "    google_values = [x[0] for x in g.values]\n",
    "    google_states = []\n",
    "    st = dict((y,x) for x, y in states.items())\n",
    "    index = list(g.index)\n",
    "    google_states = []\n",
    "    for state in st:\n",
    "        if state in index:\n",
    "            google_states.append(st[state])\n",
    "    d = {'idx': google_values, 'stat': google_states}\n",
    "    d = pd.DataFrame(data=d)\n",
    "    df2_gt = df_gt\n",
    "    df2_gt = df2_gt[df2_gt['LocationAbbr'].isin(google_states)]\n",
    "\n",
    "    # create a compact ground truth dataframe\n",
    "    df2_gt = pd.DataFrame(data=list(df2_gt.Data_Value), index=list(df2_gt.LocationAbbr), columns=['value'],\n",
    "                          dtype=np.float)\n",
    "\n",
    "    google_df = pd.DataFrame(data=google_values, index=google_states, columns=['value'], dtype=np.float)\n",
    "\n",
    "    # normalizing\n",
    "    df2_gt = (df2_gt - df2_gt.mean())/df2_gt.std()\n",
    "    google_df = (google_df - google_df.mean())/google_df.std()\n",
    "\n",
    "    # order\n",
    "    df2_gt = df2_gt.sort_index()\n",
    "    google_df = google_df.sort_index()\n",
    "    cor = pearsonr(df2_gt, google_df)[0][0]\n",
    "    \n",
    "    \n",
    "    \n",
    "    return cor\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#getCor(gt_Year_Type=\"data/BRFSS/2013_AA.csv\",query=\"data/GoogleTrends/2013_kidneyDysplasia.csv\",year = 1,type_= \"AA\")\n",
    "nQueries = 10\n",
    "nYears = 6\n",
    "corrMat = np.empty(shape=(nQueries*nYears,2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2013"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Correlation</th>\n",
       "      <th>QTerm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.026021</td>\n",
       "      <td>kidney</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.290333</td>\n",
       "      <td>stones</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.012822</td>\n",
       "      <td>CKD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.229829</td>\n",
       "      <td>dysplasia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.142984</td>\n",
       "      <td>renal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-0.401092</td>\n",
       "      <td>disease</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Correlation      QTerm\n",
       "0    -0.026021     kidney\n",
       "1    -0.290333     stones\n",
       "2    -0.012822        CKD\n",
       "3    -0.229829  dysplasia\n",
       "4    -0.142984      renal\n",
       "5    -0.401092    disease"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "queries = [\"kidney\", \"stones\", \"CKD\",\"dysplasia\",\"renal\",\"disease\"]\n",
    "cor2013AA = []\n",
    "for qTerm in queries:\n",
    "   # for i in range(corrMat.shape(0)):\n",
    "        #for j in range(corrMat.shape(1))\n",
    "    cor2013AA.append(getCor(gt_Year_Type=\"data/BRFSS/2013_AA.csv\",query=[qTerm],year = 2013,type_= \"AA\"))\n",
    "d = {'QTerm': queries, 'Correlation': cor2013AA}\n",
    "df = pd.DataFrame(data=d)\n",
    "#print(df.to_string(index=False))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Correlation</th>\n",
       "      <th>QTerm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.034779</td>\n",
       "      <td>kidney</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.319058</td>\n",
       "      <td>stones</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.019879</td>\n",
       "      <td>CKD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.200466</td>\n",
       "      <td>dysplasia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.076880</td>\n",
       "      <td>renal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-0.364950</td>\n",
       "      <td>disease</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Correlation      QTerm\n",
       "0    -0.034779     kidney\n",
       "1    -0.319058     stones\n",
       "2     0.019879        CKD\n",
       "3    -0.200466  dysplasia\n",
       "4    -0.076880      renal\n",
       "5    -0.364950    disease"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "queries = [\"kidney\", \"stones\", \"CKD\",\"dysplasia\",\"renal\",\"disease\"]\n",
    "cor2013 = []\n",
    "for qTerm in queries:\n",
    "   # for i in range(corrMat.shape(0)):\n",
    "        #for j in range(corrMat.shape(1))\n",
    "    cor2013.append(getCor(gt_Year_Type=\"data/BRFSS/2013.csv\",query=[qTerm],year = 2013,type_= \"AA\"))\n",
    "d = {'QTerm': queries, 'Correlation': cor2013}\n",
    "df = pd.DataFrame(data=d)\n",
    "#print(df.to_string(index=False))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYYAAAD8CAYAAABzTgP2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAIABJREFUeJzt3Xl8VfWd//HXJ/tGEkISCLmBsASR\nLYEEFHCZiihYZQ2L41j6c2vVTqfaTtVpO7ZOnaljq7YzonWr1ioJq+C+oLYqSxJCwr6DuQmBBEII\nBEJI8v39kRuHpAES7nLu8nk+Hvdxt3Pu+QQC73vO93y+R4wxKKWUUm2CrC5AKaWUd9FgUEop1Y4G\ng1JKqXY0GJRSSrWjwaCUUqodDQallFLtaDAopZRqR4NBKaVUOxoMSiml2gmxuoBLkZiYaNLT060u\nQymlfMqGDRuOGGOSLracTwZDeno6RUVFVpehlFI+RUS+7spyeihJKaVUOxoMSiml2tFgUEop1Y4G\ng1JKqXY0GJRSSrWjwaCUUqodDQallFLtaDAov/P+5kq+PlpvdRlK+SwNBuVX7DWnuPeNYn797nar\nS1HKZ2kwKL+SX2gH4LMdVRw5ecbiapTyTS4JBhGZIiI7RWSPiDzcyfvXiEixiDSJSG6H9xaIyG7H\nbYEr6lGBqam5hSUb7GQkx9DUYlhZctDqkpTySU4Hg4gEA88CU4FhwK0iMqzDYmXAd4E3O6ybADwK\nXAGMAx4VkZ7O1qQC0+c7qzlcd4Yf33AZo2xxLN1QbnVJSvkkV+wxjAP2GGP2GWMagTxg+rkLGGMO\nGGM2AS0d1r0R+NgYU2OMOQZ8DExxQU0qAOUV2kmMCWfS5cnMybaxvbKOrQePW12WUj7HFcGQCtjP\neV7ueM3d6yr1jcN1DXy2s4rcbBuhwUHcktmXsOAg3WtQ6hK4Ihikk9eMq9cVkXtEpEhEiqqrq7tc\nnAoMSzeU09ximDc2DYD4qDAmD+vNypKDNDZ13FFVSl2IK4KhHEg757kN6OqoX5fXNca8YIzJMcbk\nJCVd9DoTKoC0tBjyCsu4cmACAxKjv3k9N9tGTX0jn+6osrA6pXyPK4KhEMgQkQEiEgbMB1Z1cd0P\ngRtEpKdj0PkGx2tKddnafUex15zm1nH92r1+dUYiST3C9XCSUt3kdDAYY5qAH9D6H/p2YLExZquI\nPCYi0wBEZKyIlANzgD+KyFbHujXAf9AaLoXAY47XlOqyRQVlxEWGcuPwPu1eDwkOYtboVD7bWUX1\nCe1pUKqrXNLHYIx5zxgzxBgzyBjzuOO1fzfGrHI8LjTG2Iwx0caYXsaY4ees+4oxZrDj9idX1KMC\nR019Ix9tPczM0alEhAb/3fu52TaaWwwrSyosqE4p36Sdz8qnLS8up7G5hfnj0jp9P6N3DzLT4lm6\noRxjunpOhFKBTYNB+SxjDHmFdrLS4hnaJ/a8y+Vm29hx6ARbD9Z5sDqlfJcGg/JZxWXH2FN1klvP\ns7fQZtoo7WlQqjs0GJTPWlRgJzosmJtH9b3gcnFRoUwe3puVJRXa06BUF2gwKJ9U13CWdzdVMi2r\nL9HhIRddPjfbxrFTZ/l0x2EPVKeUb9NgUD5pVclBTp9tZt7YfhdfGLh6cCLJ2tOgVJdoMCiflF9o\nZ2ifHmTa4rq0fEhwEDPHpPLZzmrtaVDqIjQYlM/ZUnGczRXHmT82DZHOptvq3BztaVCqSzQYlM/J\nL7QTFhLEzNG2bq03OLkHWWnxLCnSngalLkSDQfmU043NvFVSwU0j+hAXFdrt9XOzbew8rD0NSl2I\nBoPyKe9truREQxPzx3Vt0LmjW0b1JSwkiCVF9osvrFSA0mBQPiWvsIwBidFcMSDhktaPiwrlhmG9\nWVl6kDNNzS6uTin/oMGgfMaeqhMUHjjGvG4OOneUm22j9tRZPt2u12lQqjMaDMpn5BfaCQkSZo/p\n3qBzR1dnJNE7VnsalDofDQblE840NbOsuILrL+9NUo9wpz4rOEiYNcbG57uqqTrR4KIKlfIfGgzK\nJ3yyrYqa+sbzTq/dXbPHOHoaNnb1KrRKBQ4NBuUT8grLSI2P5OoM11zve3ByDKP76XUalOqMBoPy\nevaaU3yx+whzcmwEB136oHNHbT0NmyuOu+wzlfIHGgzK6y0usiMCc3Jccxipzc2OngYdhFaqPQ0G\n5dWamltYUlTOtUOSSI2PdOlnx0WGcuPwPqws0Z4Gpc6lwaC82l93VXOoroH5Y127t9BmTraN46fP\nslp7GpT6hgaD8mp5hXYSY8KYdHlvt3z+xMGJ9ImN0MNJSp3DJcEgIlNEZKeI7BGRhzt5P1xE8h3v\nrxeRdMfr6SJyWkRKHLfnXVGP8g9VdQ18uqOK2dk2QoPd8x2mtachlb/uqqaqTnsalAIXBIOIBAPP\nAlOBYcCtIjKsw2J3AseMMYOBp4EnznlvrzEmy3H7vrP1KP+xZEM5zS2G+V28Stulmu24TsNbep0G\npQDX7DGMA/YYY/YZYxqBPGB6h2WmA685Hi8FJokzk90ov9fSYsgvtHPlwAQGJEa7dVuDkmIY00+v\n06BUG1cEQypw7hzG5Y7XOl3GGNMEHAd6Od4bICIbReSvInL1+TYiIveISJGIFFVXV7ugbOXN1u07\nSlnNKbfvLbTJzU5jd9VJNpVrT4NSrgiGzr75d/zadb5lKoF+xpjRwIPAmyIS29lGjDEvGGNyjDE5\nSUmu6X5V3mtRoZ24yFCmjOjjke3dnJlCuPY0KAW4JhjKgXPPJbQBHSeg+WYZEQkB4oAaY8wZY8xR\nAGPMBmAvMMQFNSkfVlPfyIdbDjFzdCoRocEe2WZsRGsIrSo9SMNZ7WlQgc0VwVAIZIjIABEJA+YD\nqzosswpY4HicC3xqjDEikuQYvEZEBgIZwD4X1KR82IqNFTQ2tzDPTb0L55OrPQ1KAS4IBseYwQ+A\nD4HtwGJjzFYReUxEpjkWexnoJSJ7aD1k1HZK6zXAJhEppXVQ+vvGmBpna1K+yxhDXkEZmWnxXJ7S\n6VFFt5kwKJGUuAiWbtDLfqrAFuKKDzHGvAe81+G1fz/ncQMwp5P1lgHLXFGD8g/FZbXsrjrJb2aN\n9Pi223oanvt8L4frGugdG+HxGpTyBtr5rLxKXkEZUWHB3JzZ15Ltzx5jo8W0Hs5SKlBpMCivcaLh\nLO9sqmRaZl9iwl2yM9ttA5NiyO7fU6/ToAKaBoPyGqtKD3L6bLPHB507mpNtY0/VSUq1p0EFKA0G\n5TXyC+0M7dODrLR4S+u4aVQKEaFBOgitApYGg/IKWw8eZ1P5ceaNTcPq2VJiI0KZMrwPq0q0p0EF\nJg0G5RXyC+2EhQQxc3TH2VSskZudRl1DE59sP2x1KUp5nAaDstzpxmZWbKzgphF9iI8Ks7ocAMYP\n6kXfuAiWFOkUGSrwaDAoy72/pZITDU3M89CEeV3R2tNg44vd1Rw6rtdpUIFFg0FZLq/ATnqvKK4c\nmGB1Ke3kZmtPgwpMGgzKUnuqTlJwoIZ5Y/tZPujcUXpiNGPTe7J0g117GlRA0WBQllpcZCckSJid\n7R2Dzh3lZtvYW11Pib3W6lKU8hgNBmWZxqYWlm0oZ9LlyST38M55iW4a2dbToIPQKnBoMCjLfLL9\nMEfrG5k/znsGnTvqERHK1BEpep0GFVA0GJRlFhWU0TcugmsyvPuKfLnZNk40NPHRNu1pUIFBg0FZ\nwl5zii/3HGFOThrBQd416NzR+IG9SI2P1MNJKmBoMChLLClqnYdoTo7N4kouLihImD0mlS+1p0EF\nCA0G5XHNLYbFReVck5GErWeU1eV0yWxHT8PyjbrXoPyfBoPyuL/uquJQXQPzLZ5euzv694pmXHqC\nXqdBBQQNBuVxeQV2EmPCmHR5b6tL6ZbcbBv7quvZqD0Nys9pMCiPqqprYPWOKmZn2wgL8a1fv5tG\npRAZGqyD0Mrv+da/TOXzlhaX09ximJfjO4eR2sSEhzB1RB/e1p4G5edcEgwiMkVEdorIHhF5uJP3\nw0Uk3/H+ehFJP+e9Rxyv7xSRG11Rj/JOLS2G/EI7VwxIYGBSjNXlXJK2noYPtx6yuhSl3MbpYBCR\nYOBZYCowDLhVRIZ1WOxO4JgxZjDwNPCEY91hwHxgODAFWOj4POWH1u07ytdHTzF/nO/tLbS5Unsa\nVABwxR7DOGCPMWafMaYRyAOmd1hmOvCa4/FSYJK0TqU5HcgzxpwxxuwH9jg+T/mhvEI7sREhTB2R\nYnUplywoSJidbePLPUeoPH7a6nKUcgtXBEMqcO5V08sdr3W6jDGmCTgO9OriusoPHKtv5IMth5g5\nOpWIUN/eKZw9JhVjYHmxXqdB+SdXBENn8xl0PNH7fMt0Zd3WDxC5R0SKRKSourq6myUqq63YWEFj\nc4tXT5jXVf17RTNuQALLtKdB+SlXBEM5cO5BYxtw8HzLiEgIEAfUdHFdAIwxLxhjcowxOUlJ3j3p\nmmrPGENeYRmZtjguT4m1uhyXyM22se9IPcVl2tOg/I8rgqEQyBCRASISRutg8qoOy6wCFjge5wKf\nmtavWquA+Y6zlgYAGUCBC2pSXmSjvZZdh0/6xd5Cm5tGtvU02C++sFI+xulgcIwZ/AD4ENgOLDbG\nbBWRx0RkmmOxl4FeIrIHeBB42LHuVmAxsA34ALjfGKMniPuZvIIyosKCuSWzr9WluExMeAg3jUzh\nndJKTjfqr6zyLyGu+BBjzHvAex1e+/dzHjcAc86z7uPA466oQ3mfEw1nebu0kmmZfYkJd8mvm9fI\nzbaxrLicj7YdYnqWnjOh/Id2Piu3eru0ktNnm5nnw70L53PFgARsPbWnQfkfDQblVvmFZVzWuwej\n0+KtLsXlWq/T0NrTcLBWexqU/9BgUG6z7WAdpeXHmT8ujdZ+Rv8ze4wNY1pPx1XKX2gwKLfJLywj\nLCSImaP99/h7v15RXDFAr9Og/IsGg3KLhrPNrNhYwdQRfYiPCrO6HLfKzbax/0g9G74+ZnUpSrmE\nBoNyi/e3VFLX0MQ8H7pK26W6aWQKUWF6nQblPzQYlFssKrCT3iuK8QN7WV2K20W39TRs0p4G5R80\nGJTL7a0+ScH+GuaO9d9B545ys22cPKPXaVD+QYNBudziQjvBQUJuts3qUjxmXHoCaQna06D8gwaD\ncqnGphaWbihn0tBkkntEWF2Ox7T1NHy19wgV2tOgfJwGg3Kp1dsPc7S+kVv9aMK8rvqmp6FY9xqU\nb9NgUC61qNBOSlwE1wwJvKnR0xJaB9u1p0H5Og0G5TLlx07xxe5q5uSkERwUGIPOHeVm2zhw9BRF\n2tOgfJgGg3KZxUWth1Dm5gTOoHNHU0f2ITosmKVFejhJ+S4NBuUSzS2GJUV2rs5IwtYzyupyLBMV\n1trT8O7mSk41NlldjlKXRINBucTfdlVTebyBWwOg0/litKdB+ToNBuUSeYVl9IoOY9Llva0uxXJj\n0xPolxClPQ3KZ2kwKKdVnWhg9fYqcrNthIXor1RbT8OavUcpP3bK6nKU6jb9V6yctmxDBU0thrl6\nGOkbs7NTMQaWF+t1GpTv0WBQTjHGkF9YxrgBCQxKirG6HK9h6xnFhEHa06B8kwaDcsrafUc5cPQU\n83Vv4e/kZtsoqzlF4QHtaVC+RYNBOSW/0E6PiNZTNFV7U0Y4eho22K0uRalucSoYRCRBRD4Wkd2O\n+57nWW6BY5ndIrLgnNc/F5GdIlLiuCU7U4/yrNpTjby/5RAzR6cSERpsdTleJyoshG+PSuHdTdrT\noHyLs3sMDwOrjTEZwGrH83ZEJAF4FLgCGAc82iFAbjPGZDluVU7WozxoxcYKGptamD828CbM66rc\n7DTqG5v5YIv2NCjf4WwwTAdeczx+DZjRyTI3Ah8bY2qMMceAj4EpTm5XWcwYQ16BnVG2OIb1jbW6\nHK81Nr0n/XtFsUSnyFA+xNlg6G2MqQRw3Hd2KCgVOPcga7njtTZ/chxG+oVc4HJfInKPiBSJSFF1\ndbWTZStnldhr2Xn4hO4tXISIkDvGxtp9R7HXaE+D8g0XDQYR+UREtnRym97FbXT2n33b+Xu3GWNG\nAlc7bref70OMMS8YY3KMMTlJSYE3pbO3ySuwExUWzLSsvlaX4vVmZdsQ0Z4G5TsuGgzGmOuNMSM6\nua0EDotICoDjvrMxgnLg3HMZbcBBx2dXOO5PAG/SOgahvNzJM028vekgN49KISY8xOpyvF5qfGRr\nT0OxnZYW7WlQ3s/ZQ0mrgLazjBYAKztZ5kPgBhHp6Rh0vgH4UERCRCQRQERCgZuBLU7Wc0El9loK\nD9S4cxMB4e3Sg5xqbGZ+AF6l7VLlZtuw15zW3z/lE5wNht8Ak0VkNzDZ8RwRyRGRlwCMMTXAfwCF\njttjjtfCaQ2ITUAJUAG86GQ952WM4fF3t3HbS+t5f3OluzYTEPIK7QzpHcPotHirS/EZNw7vQ0x4\niE6sp3yCU8FgjDlqjJlkjMlw3Nc4Xi8yxtx1znKvGGMGO25/crxWb4zJNsaMMsYMN8b8izGm2bkf\n5/xEhBduz2Fkahz3vVnMK1/ud9em/Nr2yjpK7bXMH9uPC5wroDqICgvh247rNNSf0Z4G5d0CqvO5\nZ3QYb9x1BTcM681j72zj8Xe36THfbsovtBMWHMTM0akXX1i1MyfHxqnGZt7Xngbl5QIqGAAiQoNZ\neFs2C8b358Uv9vPDvI2caXLbjopfaTjbzPLicqaM6EPP6DCry/E52f17kt4rSqfIUF4v4IIBIDhI\n+OW04TwydSjvbKrkOy8XcPzUWavL8nrvb6mkrqFJJ8y7RCJCbraNdftqtKdBebWADAZo/Uf6vWsH\n8fv5WRSXHSP3+TVU1J62uiyvlldgp3+vKK4c2MvqUnzWzDGtPQ3LinUQWnmvgA2GNtOzUnntjnEc\nOt7ArIVfse1gndUleaV91SdZv7+GuTlpBAXpoPOlSo2PZOKgRJYVl+v4lvJaAR8MABMGJbLk3vEI\nwtw/ruWrPUesLsnr5BfZCQ4S5mTbrC7F57X1NBRoT4PyUhoMDkP7xLLi/gmkxkey4JUCVmzUXf02\njU0tLNtQznVDk0mOjbC6HJ934/A+9NCeBqcYY3Scxo00GM6REhfJknvHMzY9gQfyS3n2sz16WUbg\n0x2HOXKykVvH6aCzK0SGBXNzZgrvaU/DJTnb3MLP39rC1f/9mfYjuYkGQwexEaG8esdYpmX25ckP\nd/KLlVtoDvBjwYsK7PSJjeDaIXodJVfJzW7taXhPu/C7pa7hLHe8Wsgb68uw9YzkNx/sYPfhE1aX\n5Xc0GDoRHhLMM/Oy+P61g/jLujK+9/oGTjcGZq9DRe1p/ra7mrk5NoJ10NllxvTryYDEaD2c1A32\nmlPMXriGtXuP8t+zR7Hivon0CA/hR/klNDa1WF2eX9FgOI+gIOHhqUN5bPpwVu84zK0vruPoyTNW\nl+Vxiwtbm7Hm5OhhJFdq62lYv7+GsqN6rPxiisuOMXPhVxyua+DPd45j7tg0knqE81+zRrL1YB3P\nfLLL6hL9igbDRXxnfDrP3ZbN9so6Zj+3hq+P1ltdksc0txiWFNm5anAiaQlRVpfjd2aOTtWehi54\nu/Qg819YR3R4CCvun8iEQYnfvHfD8D7My0nj+b/u1ZlrXUiDoQumjOjDm3dfQe3ps8xauIZSe63V\nJXnE33ZXc/B4A7fq9Npu0Tc+kqsGa0/D+Rhj+J/Vu/nnRRvJssWz4r6JDEqK+bvlfnHLMGw9o3hw\ncQkndTDfJTQYuii7fwLL7p1AVHgw819Yx+rth60uye3yC+z0ig7j+st7W12K38rNtlF+7DTr9+u3\n3XOdaWrmx4tL+d3Hu5g5OpXX7xpHwnnm54oJD+GpuZlUHDvNY29v9XCl/kmDoRsGJcWw7N4JDE6O\n4e4/F7GooMzqktym+sQZPtl+mNnZNsJC9NfEXdp6GpboxHrfOFbfyO0vFbB8YwUPTh7CU3MzCQ8J\nvuA6OekJ3PsPg1hcVM6HW3X2Wmfpv/huSu4RQd49V3LNkCQeWb6Zpz7a6Ze9DsuKy2lqMczVQWe3\niggN5ubMvry/+ZAeBgH2Vp9k5sKvKCmv5Q+3juaHkzK6fN2Pf5k0hOF9Y3lk+WaqTwTeiSKupMFw\nCaLDQ3jxOznMzbHxh0/38JMlmzjb7D+nyxljyC+0My49gcHJf39MV7lWbraN02e1p2Ht3qPMWriG\nEw1NLLr7SqZl9u3W+mEhQTwzL4v6M008tGyTX35h8xQNhksUGhzEE7NH8aPrM1hWXM4drxb6zTe+\ndftq2H+knnk6vbZHjOkXz8AA72lYXGTn9pfXk9wjnLfun0h2/56X9DkZvXvw8NShfLqjikUFenju\nUmkwOEFE+NH1Q/jv2aNYs/coc59fS1Vdg9VlOS2/sIweESHcNDLF6lICgogwO9tGwf6agDodGqCl\nxfDEBzv46dJNjB/Ui2X3TXD61OgF49O5anAi//HONg4cCaw/T1fRYHCBuWPTeGlBDgeO1jNz4Rr2\nVPlui37tqUbe23KIGVmpRIZdeMBPuc6sMakECSwrrrC6FI853djM/W8W89zne/nHK/rxynfHEhsR\n6vTnBgUJT84ZRWiw8MDiEpr86DCvp2gwuMi3Lksm/57xnGlqYfZza3222eatjRU0NrUwXyfM86iU\nuEiuykhi2YbA6GmoOtHA/BfW8sHWQ/z825fz+IwRhAa77r+jlLhIHp85ko1ltSz8fK/LPjdQOPU3\nISIJIvKxiOx23Hd6YFBEPhCRWhF5p8PrA0RkvWP9fBHx6QsJj7TFseK+CfSKDuO2l9bzvo8NJhpj\nyCu0M8oWx/C+cVaXE3Bys21U1J5m3b6jVpfiVjsO1THz2TXsOnySF27P4a6rB3b5zKPuuCWzL9Oz\n+vL71bsDpinVVZyN6IeB1caYDGC143lnngRu7+T1J4CnHesfA+50sh7LpSVEsezeCYxMjeO+N4t9\nalrg0vLj7Dh0QgedLXLDsN70iPDv6zR8trOK3OfW0tTSwpLvj2fyMPc2Tz42bQTJPcJ5YHFJwE6E\neSmcDYbpwGuOx68BMzpbyBizGmh34F1avyJcByy92Pq+pmd0GG/cdQU3DOvNY+9s4/F3t/nE4YG8\ngjIiQ4O7fZqgco2I0GBuyezLe1sqOdFw1upyXO61NQe489VC+veKYuX9VzEi1f17pXFRofxuTib7\nquv5r/e3u317/sLZYOhtjKkEcNx3Z8L+XkCtMabtHM9yINXJerxGRGgwC2/LZsH4/rz4xX5+mLeR\nM03e+43l5JkmVpUe5OZRKfRwwQCgujS52TYazrbw/mb/6d5tam7hl6u28uiqrVw3tDeLvzeePnGe\nuxLghMGJ3HnVAP689ms+31nlse36sosGg4h8IiJbOrlNd3LbnR1UPO/XahG5R0SKRKSourrayU17\nRnCQ8Mtpw3lk6lDe2VTJd14u4Pgp7/wm+E7pQU41NjNfJ8yz1Oi0eAYm+U9Pw8kzTdz95yJeXXOA\nu64awB9vzyY6PMTjdfzrjZeRkRzDT5du4lh9o8e372suGgzGmOuNMSM6ua0EDotICoDjvjtxfASI\nF5G23xIbcPACdbxgjMkxxuQkJSV1YzPWEhG+d+0gfj8/i+KyY+Q+v4aK2tNWl/V38grtZCTHMKZf\nvNWlBDQRYU52GgUHanz+HPyK2tPkPreGv+0+wuMzR/Dzm4dZdrGniNBgnpmfxbFTjfzsrc3aFX0R\nzh5KWgUscDxeAKzs6oqm9W/mMyD3Utb3NdOzUnntjnEcOt7ArIVfse1gndUlfWPHoTpK7LXMH9fP\nLWeHqO6ZObq1p2G5D1+nodRey4xnv6Li2Gle/X9jue2K/laXxPC+cTw4+TLe23yIFRsDp1/kUjgb\nDL8BJovIbmCy4zkikiMiL7UtJCJfAEuASSJSLiI3Ot56CHhQRPbQOubwspP1eLUJgxJZcu94BGHu\nH9fy1Z4jVpcEQF6BnbDgIGaO9pshHp/WJy6CqzOSWFZc4RMnLXT0wZZK5r2wlvCQIJbfN4GrM7xn\nD/+eawYyNr0nj67cSvkxvXLe+TgVDMaYo8aYScaYDMd9jeP1ImPMXecsd7UxJskYE2mMsRljPnS8\nvs8YM84YM9gYM8cY4/dTIg7tE8uK+yeQGh/JglcKWLHR2m+FDWebWbGxghtH9DnvfPfK89p6Gtb6\nUE+DMYbnPt/L9/9SzLCUWN66fyIZvXtYXVY7wUHCU3OzMMCPF5fS7IPB6wna+WyBlLhIFn9/PGPT\nE3ggv5RnP9tj2THPD7Yc4vjps8zX3gWvMtnHehoam1p4aNkmnvhgB7dk9uXNu68kMSbc6rI6lZYQ\nxaO3DGP9/hpe/nKf1eV4JQ0Gi8RFhvLqHWOZltmXJz/cyS9WbrHk20teYRn9EqIYP7CXx7etzi/C\n0U/yvg/0NBw/dZYFrxSwuKicH143mN/PyyIi1Lvn2crNtnHj8N789sNdbK/0nvE+b6HBYKHwkGCe\nmZfF964dyF/WlfG91zd4tDtz/5F61u2rYd7YNIIsOltEnV9bT4M3X6fhwJF6Zj73FRu+PsZTczN5\n8IbLfOJ3SUT4z5kjiY0M5YH8Eq/uMbKCBoPFgoKER6Zezq+mDWf1jsPc+uI6jp70zFBLfqGd4CBh\nTrbNI9tT3ZOVFs/g5BivPZxUsL+GmQu/4lh9I3+56wpmjfGt36NeMeE8mTuKHYdO8LuPdlldjlfR\nYPASCyak89xt2WyvrGP2c2vcPi//2eYWlm4o57qhySTHeq4LVXWdiJCbbaPwwDH2e1lPw4qN5fzT\nS+vpGRXGivsmMm5AgtUlXZJvDU3mtiv68eIX+1i713cG+t1Ng8GLTBnRhzfvvoLa02eZtXCNW2eE\nXL29iiMnz+igs5dr62lY5iV7DcYYnvpoJw/kl5Ldvycr7ptIemK01WU55Wffvpz+CVH8ZEkpdV4+\nnuMpGgxeJrt/AsvunUBkWDDzX1jH6u2H3bKdvMIy+sRGcO0Q7znHXP293rERXDMkiWXF5ZafWtlw\ntpkf5pXwh0/3MDfHxmt3jCMuyvfn1YoKC+HpeVkcqmvglyu3Wl2OV9Bg8EKDkmJYft8EBifHcPef\ni1hUUObSzz9Ye5q/7qpmTo5M3PESAAAQAUlEQVSNEBdeHEW5R262jcrjDZYe6jhy8gz/+OI63i49\nyENThvLE7FGEhfjP787ofj35wbcGs3xjBe9u8t7Bfk/xn79ZP5PcI4K8e67k6owkHlm+mac+2umy\nXofFRa0XSZ+bo4eRfMH1l/cmNiKEpRusubj97sMnmPHsV2yrrOO528Zw7z8M8supU35w3WAybXH8\n7K3NHPaDa7c7Q4PBi0WHh/DSghzm5tj4w6d7+MmSTZx18vq1zS2GJUXlXDU40emLrivPiAgNZlpW\nXz7Yesjjx8C/2F3NrIVrONPUQv4945k6MsWj2/ek0OAgnpqXRcPZZv516aaAnmhPg8HLhQYH8cTs\nUfzo+gyWFZdzx6uFnDzTdPEVz+OL3dVU1J5m/lidXtuXzMlOa+1p8OBhjjfWf813/1RIas9I3rp/\nIplp/j/z7qCkGH727WH8bVc1r6/72upyLKPB4ANEhB9dP4QnZo9kzd6jzH1+LVWXuKubX2gnITqM\n64d155pKymqjbHFkJMewxANnJzW3GH79zjZ+tmIL12QksvTe1rm9AsU/XdGPa4ck8Z/vbWdP1Umr\ny7GEBoMPmTe2Hy8tyOHA0XpmLlzDnqoTF1/pHNUnzvDxtsPMHpNKeIh3T1mg2mvradjw9TH2Vbvv\nP6v6M0187/UNvPTlfr47IZ0Xv5NDjAUX1rGSiPBk7igiQ4N5cHGJ04dvfZEGg4/51mXJ5N1zJWea\nmpn93FoKD9R0ed3lxeU0tRjmae+CT/qmp8FN12k4dLyBuX9cy6c7DvOracP55bThAXvWWnJsBP81\naySbyo/zP6t3W12OxwXm37qPG2WLZ/m9E+kVHcZtL63n/S7MpWOMIb/Qztj0ngxO9q6pkFXXJDv6\nTpYXV7i8p2FLxXGmP/slB47U8/KCsSyYkO7Sz/dFU0akMHuMjf/9bA/FZcesLsejNBh8VL9eUSy9\ndwIj+sZy35vFvPLl/gsuv35/DfuO1DNPB519Wm52GpXHG1iz13UXefp422HmPL+WYBGW3juBbw3V\n8ac2j04bRkpcJA/ml1DvxEkfvkaDwYclRIfx5t1XcsOw3jz2zjYef3fbea/4lV9op0dECN/249MN\nA8H1w5KJiwx1ycR6xhhe+mIf97xexJDeMbz1g4lcnhLrgir9R2xEKE/NzeTrmlP8+t3tVpfjMRoM\nPi4iNJiFt2WzYHx/XvxiPz/M2/h3UwgfP3WW9zZXMiMrlcgwHXT2ZeEhwUzP6ssHW5zraTjb3MLP\n3trCr9/dzpThfci7ZzzJPXQyxc5cMbAX91wzkEUFZW6bosbbaDD4geAg4ZfThvPw1KG8s6mS77xc\nwPFT//efxlslFZxpatFBZz+Rm23jTFML75ReWk9DXcNZ7ni1kDfXl3HvPwzi2X8co18YLuLByUMY\n2qcHDy3b5LFp8a2kweAnRITvXzuI38/PorjsGLnPr6Gi9jTGGBYVlDEyNY4RqXFWl6lcYGRqHEN6\nx1zSFBn2mlPMXriGtXuP8t+5o3hoylCfuLCO1cJDgnlmfhZ1p5t4ePlmv++K1mDwM9OzUnntjnEc\nOt7ArIVfkV9oZ8ehE7q34EfaehqKy2rZ242ehg1fH2PGs19RdeIMf75znM6V1U1D+8Ty0ymX8fG2\nwywp8o5p0N1Fg8EPTRiUyJJ7xyMIDy/fTGRo63Fp5T9mZKUSHCRdvk7DqtKD3PriOmIiQlh+3wQm\nDEp0c4X+6Y6JAxg/sBe/ensrZUdPWV2O2zgVDCKSICIfi8hux33P8yz3gYjUisg7HV5/VUT2i0iJ\n45blTD3q/wztE8uK+ycwpl88Cyak0yPC9+fNV/+nqz0Nxhj+sHo3P1y0kSxbPCvum8igpBgPVupf\ngoKE387NJChIeHBxieXXyHAXZ/cYHgZWG2MygNWO5515Erj9PO/9qzEmy3ErcbIedY6UuEiW3zeR\nh6cOtboU5QZzsm0cqmvgqz2d9zScaWrmwcWlPPXxLmaNTuX1u8aREB3m4Sr9T2p8JP8xfQRFXx/j\n+b/utboct3A2GKYDrzkevwbM6GwhY8xqoHsT+yilLui6y5OJj+q8p6GmvpF/emk9KzZW8OPJQ/jd\n3EydH8uFpmf15dujUnj6411sqThudTku52ww9DbGVAI47i+lZfJxEdkkIk+LSLiT9SgVMMJDgpme\n2ZcPtx7i+On/Oz15b/VJZi78itLy4/zPraP550kZfnlhHSuJCI/PGEFCdBgP5JfQcLb54iv5kIsG\ng4h8IiJbOrlNd8H2HwGGAmOBBOChC9Rxj4gUiUhRdXW1CzatlO/LzU5r7WnYdBCANXuPMPPZrzjZ\n0MSiu6/klkw96cBd4qPC+O2cTHZXneSJD3ZYXY5LXXQ+XWPM9ed7T0QOi0iKMaZSRFKAqu5svG1v\nAzgjIn8CfnKBZV8AXgDIycnxzxEfpbppRGosl/XuwdIN5YQGBfFvKzYzIDGaV747Vq/Q5wHXDEni\nuxPS+dNXB5g0tDdXZfjH2V7OHkpaBSxwPF4ArOzOyo4wQVr3c2cAW5ysR6mA0tbTsLGslp8u28T4\nQb1Ydt8EDQUPemjKUAYlRfOTJaXtZhzwZc4Gw2+AySKyG5jseI6I5IjIS20LicgXwBJgkoiUi8iN\njrfeEJHNwGYgEfi1k/UoFXBmjE4lMSaM26/sz5++O5ZYPTXZoyLDgnlm3miOnDzDz1f6x3db8cXW\n7pycHFNUVGR1GUp5jZYWo1NbWOx/P93Nbz/axe/nZzE9K9XqcjolIhuMMTkXW047n5XyAxoK1vv+\ntYMY0y+eX7y1hYO1p60uxykaDEop5QIhwUE8PS+LphbDT5aUnvfaKL5Ag0EppVykf69o/v3mYazZ\ne5Q/rTlgdTmXTINBKaVcaN7YNK6/PJknPtjBrsO+OeGDBoNSSrmQiPBfs0bRIzyEH+WV0NjUYnVJ\n3abBoJRSLpbUI5zfzB7Ftso6nv5kl9XldJsGg1JKucHkYb2ZPzaN5/+6l8IDNVaX0y0aDEop5SY/\nv3kYaT2jeCC/hBMNvtMVrcGglFJuEhMewtPzMjlYe5rH3t5mdTldpsGglFJulN0/gfv+YTBLNpTz\nwZZDVpfTJRoMSinlZj+clMGI1Fj+bcVmqk40WF3ORWkwKKWUm4WFBPHMvCzqzzTx0NJNePscdRoM\nSinlAYOTe/DI1KF8trOaNwvKrC7ngjQYlFLKQ74zPp2rMxL59Tvb2X+k3upyzkuDQSmlPCQoSHgy\nN5OwkCAeyC+hqdk7u6I1GJRSyoP6xEXw6xkjKLHX8uxne60up1MaDEop5WG3ZPZlRlZf/vDpbkrt\ntVaX83c0GJRSygK/mj6C5B7hPJBfwunGZqvLaUeDQSmlLBAXGcrv5mSy70g9//nedqvLaUeDQSml\nLDJhcCJ3XTWA19d9zWc7q6wu5xsaDEopZaGf3HgZQ3rH8NOlmzhW32h1OYCTwSAiCSLysYjsdtz3\n7GSZLBFZKyJbRWSTiMw7570BIrLesX6+iIQ5U49SSvmaiNBgnpk3mtpTjfzbis1e0RXt7B7Dw8Bq\nY0wGsNrxvKNTwHeMMcOBKcAzIhLveO8J4GnH+seAO52sRymlfM6wvrH8+IbLeH/LIZYXV1hdjtPB\nMB14zfH4NWBGxwWMMbuMMbsdjw8CVUCSiAhwHbD0QusrpVQguPvqgYxLT+DRVVux15yytBZng6G3\nMaYSwHGffKGFRWQcEAbsBXoBtcaYJsfb5UCqk/UopZRPCg4Sfjc3E4AfLymlucW6Q0oXDQYR+URE\ntnRym96dDYlICvA68P+MMS2AdLLYef8kROQeESkSkaLq6urubFoppXxCWkIUj94yjIL9Nbz0xT7L\n6gi52ALGmOvP956IHBaRFGNMpeM//k7PtxKRWOBd4OfGmHWOl48A8SIS4thrsAEHL1DHC8ALADk5\nOdaPziillBvkZttYvb2K3360k6szkhjWN9bjNTh7KGkVsMDxeAGwsuMCjjONVgB/NsYsaXvdtA69\nfwbkXmh9pZQKJCLCf84aSVxkGA/kl9Bw1vNd0c4Gw2+AySKyG5jseI6I5IjIS45l5gLXAN8VkRLH\nLcvx3kPAgyKyh9Yxh5edrEcppXxeQnQYT+aOYufhE/zuo50e3754wzmz3ZWTk2OKioqsLkMppdzq\n529t5o31Zbxx1xVMGJTo9OeJyAZjTM7FltPOZ6WU8lL/dtPlpPeK5ieLS6lrOOux7WowKKWUl4oK\nC+HpeVkcPnGGR1du9dh2NRiUUsqLZaXF88/XDWbFxgre2XTeEzddSoNBKaW83P3fGkxmWjw/W7GF\nQ8cb3L49DQallPJyocFBPD03k6y0eFo8cMLQRRvclFJKWW9gUgyv3THOI9vSPQallFLtaDAopZRq\nR4NBKaVUOxoMSiml2tFgUEop1Y4Gg1JKqXY0GJRSSrWjwaCUUqodn5x2W0Sqga8vcfVEWq8eF0j0\nZw4M+jP7P2d/3v7GmKSLLeSTweAMESnqynzk/kR/5sCgP7P/89TPq4eSlFJKtaPBoJRSqp1ADIYX\nrC7AAvozBwb9mf2fR37egBtjUEopdWGBuMeglFLqAgIqGERkiojsFJE9IvKw1fW4m4i8IiJVIrLF\n6lo8QUTSROQzEdkuIltF5F+srsndRCRCRApEpNTxM//K6po8RUSCRWSjiLxjdS2eICIHRGSziJSI\nSJFbtxUoh5JEJBjYBUwGyoFC4FZjzDZLC3MjEbkGOAn82Rgzwup63E1EUoAUY0yxiPQANgAz/Pzv\nWIBoY8xJEQkFvgT+xRizzuLS3E5EHgRygFhjzM1W1+NuInIAyDHGuL1vI5D2GMYBe4wx+4wxjUAe\nMN3imtzKGPM3oMbqOjzFGFNpjCl2PD4BbAdSra3KvUyrk46noY6b33/bExEb8G3gJatr8UeBFAyp\ngP2c5+X4+X8agUxE0oHRwHprK3E/xyGVEqAK+NgY4/c/M/AM8FOgxepCPMgAH4nIBhG5x50bCqRg\nkE5e8/tvVoFIRGKAZcCPjDF1VtfjbsaYZmNMFmADxomIXx82FJGbgSpjzAara/GwicaYMcBU4H7H\noWK3CKRgKAfSznluAw5aVItyE8dx9mXAG8aY5VbX40nGmFrgc2CKxaW420RgmuOYex5wnYj8xdqS\n3M8Yc9BxXwWsoPXwuFsEUjAUAhkiMkBEwoD5wCqLa1Iu5BiIfRnYbox5yup6PEFEkkQk3vE4Erge\n2GFtVe5ljHnEGGMzxqTT+u/4U2PMP1lclluJSLTjhApEJBq4AXDb2YYBEwzGmCbgB8CHtA5KLjbG\nbLW2KvcSkUXAWuAyESkXkTutrsnNJgK30/oNssRxu8nqotwsBfhMRDbR+uXnY2NMQJy+GWB6A1+K\nSClQALxrjPnAXRsLmNNVlVJKdU3A7DEopZTqGg0GpZRS7WgwKKWUakeDQSmlVDsaDEoppdrRYFBK\nKdWOBoNSSql2NBiUUkq18/8BkiTKRbV9ZIkAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1424bb38>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "queries = [\"kidney\", \"stones\", \"CKD\",\"dysplasia\",\"renal\",\"disease\"]\n",
    "cor2014 = []\n",
    "for qTerm in queries:\n",
    "   # for i in range(corrMat.shape(0)):\n",
    "        #for j in range(corrMat.shape(1))\n",
    "    cor2014.append(getCor(gt_Year_Type=\"data/BRFSS/2014.csv\",query=[qTerm],year = 2014,type_= \"AA\"))\n",
    "d = {'QTerm': queries, 'Correlation': cor2014}\n",
    "df = pd.DataFrame(data=d['Correlation'],index=queries)\n",
    "\n",
    "#print(df.to_string(index=False))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>kidney</th>\n",
       "      <td>-0.059186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>stones</th>\n",
       "      <td>-0.080727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CKD</th>\n",
       "      <td>0.085619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dysplasia</th>\n",
       "      <td>-0.212655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>renal</th>\n",
       "      <td>-0.138870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>disease</th>\n",
       "      <td>-0.268379</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  0\n",
       "kidney    -0.059186\n",
       "stones    -0.080727\n",
       "CKD        0.085619\n",
       "dysplasia -0.212655\n",
       "renal     -0.138870\n",
       "disease   -0.268379"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "queries = [\"kidney\", \"stones\", \"CKD\",\"dysplasia\",\"renal\",\"disease\"]\n",
    "cor2014AA = []\n",
    "for qTerm in queries:\n",
    "   # for i in range(corrMat.shape(0)):\n",
    "        #for j in range(corrMat.shape(1))\n",
    "    cor2014AA.append(getCor(gt_Year_Type=\"data/BRFSS/2014_AA.csv\",query=[qTerm],year = 2014,type_= \"AA\"))\n",
    "d = {'QTerm': queries, 'Correlation': cor2014AA}\n",
    "df = pd.DataFrame(data=d['Correlation'],index=queries)\n",
    "#print(df.to_string(index=False))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nkm3/D7TStKrL4MJOAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a13e243c8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(13,7))\n",
    "plt.plot(cor2013AA, label =\"Age Adjusted prevalence 13\")\n",
    "plt.plot(cor2013, label = \"Crude prevalence 13\")\n",
    "plt.plot(cor2014AA, label =\"Age Adjusted prevalence 14\")\n",
    "plt.plot(cor2014, label = \"Crude prevalence 14\")\n",
    "plt.legend(fontsize=\"small\")\n",
    "plt.xlabel(\"query term\")\n",
    "plt.ylabel(\"Cor value \")\n",
    "plt.title(\"Correlation\")\n",
    "plt.grid()\n",
    "#plt.xticks(queries)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-0.034778776713537927,\n",
       " -0.31905788971195209,\n",
       " 0.019878731537653023,\n",
       " -0.20046605879422852,\n",
       " -0.076879881386819546,\n",
       " -0.36495013506534713]"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cor2013"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "60"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corrMat.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "corrMat[0,0] = getCor(gt_Year_Type=\"data/BRFSS/2013_AA.csv\",query=\"data/GoogleTrends/2013_kidneyDysplasia.csv\",year = 1,type_= \"AA\")\n",
    "\n",
    "corrMat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ground Truth data treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_gt = pd.read_csv(\"data/BRFSS/2013_AA.csv\", sep=\";\")#2016 210\n",
    "df_gt = df_gt[np.logical_not(pd.to_numeric(df_gt.LocationAbbr, errors='coerce').notnull())]\n",
    "df_gt = df_gt.dropna(subset=['LocationAbbr'])   #Drop only if NaN in specific column (as asked in the question)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Google data treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                      Category: Health\n",
      "Alabama                            100\n",
      "Arizona                             12\n",
      "California                          13\n",
      "Colorado                            17\n",
      "Connecticut                         19\n",
      "District of Columbia                37\n",
      "Florida                             11\n",
      "Georgia                             13\n",
      "Illinois                            18\n",
      "Indiana                             36\n",
      "Kentucky                            43\n",
      "Louisiana                           20\n",
      "Maryland                            34\n",
      "Massachusetts                       34\n",
      "Michigan                            29\n",
      "Minnesota                           11\n",
      "Missouri                            27\n",
      "New Jersey                          19\n",
      "New York                            13\n",
      "North Carolina                      17\n",
      "Ohio                                13\n",
      "Oklahoma                            23\n",
      "Oregon                              16\n",
      "Pennsylvania                        20\n",
      "South Carolina                      31\n",
      "Tennessee                           13\n",
      "Texas                               18\n",
      "Virginia                            30\n",
      "Washington                          28\n",
      "Wisconsin                           20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/giacomomaretto/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:3: FutureWarning: convert_objects is deprecated.  Use the data-type specific converters pd.to_datetime, pd.to_timedelta and pd.to_numeric.\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    }
   ],
   "source": [
    "gk2011 = pd.read_csv(\"data/GoogleTrends/2013_kidneyDysplasia.csv\",sep=\",\")\n",
    "g = (gk2011[1:])\n",
    "g = g.convert_objects(convert_numeric=True)\n",
    "g = g.sort_index()\n",
    "#g= dict(keys=list(g.index),values = g.values)\n",
    "print((g))\n",
    "google_values = [x[0] for x in g.values]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Alabama',\n",
       " 'Arizona',\n",
       " 'California',\n",
       " 'Colorado',\n",
       " 'Connecticut',\n",
       " 'District of Columbia',\n",
       " 'Florida',\n",
       " 'Georgia',\n",
       " 'Illinois',\n",
       " 'Indiana',\n",
       " 'Kentucky',\n",
       " 'Louisiana',\n",
       " 'Maryland',\n",
       " 'Massachusetts',\n",
       " 'Michigan',\n",
       " 'Minnesota',\n",
       " 'Missouri',\n",
       " 'New Jersey',\n",
       " 'New York',\n",
       " 'North Carolina',\n",
       " 'Ohio',\n",
       " 'Oklahoma',\n",
       " 'Oregon',\n",
       " 'Pennsylvania',\n",
       " 'South Carolina',\n",
       " 'Tennessee',\n",
       " 'Texas',\n",
       " 'Virginia',\n",
       " 'Washington',\n",
       " 'Wisconsin']"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(g.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "states = {\n",
    "        'AK': 'Alaska',\n",
    "        'AL': 'Alabama',\n",
    "        'AR': 'Arkansas',\n",
    "        'AS': 'American Samoa',\n",
    "        'AZ': 'Arizona',\n",
    "        'CA': 'California',\n",
    "        'CO': 'Colorado',\n",
    "        'CT': 'Connecticut',\n",
    "        'DC': 'District of Columbia',\n",
    "        'DE': 'Delaware',\n",
    "        'FL': 'Florida',\n",
    "        'GA': 'Georgia',\n",
    "        'GU': 'Guam',\n",
    "        'HI': 'Hawaii',\n",
    "        'IA': 'Iowa',\n",
    "        'ID': 'Idaho',\n",
    "        'IL': 'Illinois',\n",
    "        'IN': 'Indiana',\n",
    "        'KS': 'Kansas',\n",
    "        'KY': 'Kentucky',\n",
    "        'LA': 'Louisiana',\n",
    "        'MA': 'Massachusetts',\n",
    "        'MD': 'Maryland',\n",
    "        'ME': 'Maine',\n",
    "        'MI': 'Michigan',\n",
    "        'MN': 'Minnesota',\n",
    "        'MO': 'Missouri',\n",
    "        'MP': 'Northern Mariana Islands',\n",
    "        'MS': 'Mississippi',\n",
    "        'MT': 'Montana',\n",
    "        'NA': 'National',\n",
    "        'NC': 'North Carolina',\n",
    "        'ND': 'North Dakota',\n",
    "        'NE': 'Nebraska',\n",
    "        'NH': 'New Hampshire',\n",
    "        'NJ': 'New Jersey',\n",
    "        'NM': 'New Mexico',\n",
    "        'NV': 'Nevada',\n",
    "        'NY': 'New York',\n",
    "        'OH': 'Ohio',\n",
    "        'OK': 'Oklahoma',\n",
    "        'OR': 'Oregon',\n",
    "        'PA': 'Pennsylvania',\n",
    "        'PR': 'Puerto Rico',\n",
    "        'RI': 'Rhode Island',\n",
    "        'SC': 'South Carolina',\n",
    "        'SD': 'South Dakota',\n",
    "        'TN': 'Tennessee',\n",
    "        'TX': 'Texas',\n",
    "        'UT': 'Utah',\n",
    "        'VA': 'Virginia',\n",
    "        'VI': 'Virgin Islands',\n",
    "        'VT': 'Vermont',\n",
    "        'WA': 'Washington',\n",
    "        'WI': 'Wisconsin',\n",
    "        'WV': 'West Virginia',\n",
    "        'WY': 'Wyoming'\n",
    "}\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "google_states = []\n",
    "st = dict((y,x) for x, y in states.items())\n",
    "index = list(g.index)\n",
    "google_states = []\n",
    "for state in st:\n",
    "    if state in index:\n",
    "        google_states.append(st[state])\n",
    "#print(len(google_states), len(google_values))\n",
    "#len(set(google_values).difference(set(google_states)))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "d = {'idx': google_values, 'stat': google_states}\n",
    "d = pd.DataFrame(data=d)\n",
    "#dpd.DataFrame(data = df, columns= ['idx','stat'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# select the same states on the GT and the Google data (standardize)\n",
    "df2_gt = df_gt\n",
    "df2_gt = df2_gt[df2_gt['LocationAbbr'].isin(google_states)]\n",
    "\n",
    "# create a compact ground truth dataframe\n",
    "df2_gt = pd.DataFrame(data=list(df2_gt.Data_Value), index=list(df2_gt.LocationAbbr), columns=['value'],\n",
    "                      dtype=np.float)\n",
    "\n",
    "google_df = pd.DataFrame(data=google_values, index=google_states, columns=['value'], dtype=np.float)\n",
    "\n",
    "# normalizing\n",
    "df2_gt = (df2_gt - df2_gt.mean())/df2_gt.std()\n",
    "google_df = (google_df - google_df.mean())/google_df.std()\n",
    "\n",
    "# order\n",
    "df2_gt = df2_gt.sort_index()\n",
    "google_df = google_df.sort_index()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pydoc import help\n",
    "from scipy.stats.stats import pearsonr\n",
    "#help(pearsonr)\n",
    "cor11 = pearsonr(df2_gt, google_df)[0][0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.07684409318748793"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cor11"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
